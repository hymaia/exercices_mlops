from sklearn.model_selection import train_test_split
from sklearn.metrics import (
    mean_absolute_error,
    mean_squared_error,
    mean_absolute_percentage_error,
)
import pandas as pd
import numpy as np


def split_train_and_val_sets(df_train: pd.DataFrame) -> tuple:
    """
    Splits the train dataset into train and validation sets
    :param df_train: (Dataframe) containing both the input features and the target
    :return:
    """
    x_train_val = df_train.drop(columns=["Weekly_Sales"])
    y_train_val = df_train["Weekly_Sales"]
    x_train, x_val, y_train, y_val = train_test_split(
        x_train_val, y_train_val, test_size=0.2, random_state=42
    )
    return x_train, x_val, y_train, y_val


def compute_metrics(y: pd.Series, pred: pd.Series, set="train"):
    """
    Computes the main regression metrics
    :param y: (Series) containing the target
    :param pred: (Series) containing the predictions generated by the model
    :return: (no return)
    """
    mae = mean_absolute_error(y, pred)
    mse = mean_squared_error(y, pred)
    mape = mean_absolute_percentage_error(y, pred)
    print(f"Mean Absolute Error ({set}) : {np.round(mae, 0)}")
    print(f"Mean Square Error ({set}) : {np.round(mse, 0)}")
    print(f"Mean Absolute Percentage Error ({set}): {np.round(mape, 0)}")

    # TODO : exercice 3.3 : ajoutez les hyper-paramÃ¨tres dans MLflow
    # ------------------------------------------------------------------------------------
    #
    #
    # ------------------------------------------------------------------------------------
